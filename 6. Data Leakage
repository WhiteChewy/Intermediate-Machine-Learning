Утечка данных

Утечка данных (или просто утечка) происходит когда данные для обучения содержут информацию о цели, но подобные данные не 
будут доступны когда модель используется для предсказаний. Это ведет к высокой производительности на тренировочном сете 
(и возможно даже с проверочными данными), но модель в результате на проде будет показывать себя ужастно.

Другими словами, утечки делают вид как будто модель достаточно точна, пока не требуется модель принимать решения и вот
в этот момент модель становится очень не точной.

Существует 2 основных вида утечек: Целевая утечка и Загрязнение обучения-тестирования.

Целевая утечка
Целевая утечка возникает когда ваши данные для предсказания включают данные которые будут недоступны в то время когда 
будут выполнены сами предсказания. Важно всегда задумываться о целевой утечке в формате временного или хронологического
порядка в котором доступны данные, а не только дает ли функция хорошие предсказиня.

Тут необходим пример. Представьте что вы хотите предсказать кто будет болеть простудой. Верхние строки вашего датасета
выглядят примерно вот так:
+-----------------+-------+----------+--------+------------------------+
|  got_pneumonia  |  age  |  weight  |  male  |took_antibiotic_medicine|
+=================+=======+==========+========+========================+
|      False      |  65   |   100    | False  |         False          |
+-----------------+-------+----------+--------+------------------------+ 
|      False      |  72   |   130    |  True  |         False          |
+-----------------+-------+----------+--------+------------------------+ 
|       True      |  58   |   100    | False  |          True          |
+-----------------+-------+----------+--------+------------------------+ 

Люди принимают антибиотики ПОСЛЕ того как заболевают пневмонией чтобы восстановится. Но необработанные данные указывают нам
на то что есть строгая взаимосвязь между этими столбцами, но took_antibiotic_medicine в основном изменяется ПОСЛЕ того как
занчение got_pneumonia определено. Это и есть целевая утечка.

Модель будет видеть что все у кого в столбце took_antibiotic_medicine значение False - как тех у кого не было простуды.
Так как данные на проверку пришли из того же сета что и данные для обучения, эта взаимосвязь будет повторяться и в проверке
и модель неплохо покажет себя на оценке.

Но модель будет поражающе не точна когда будет работать на реальных данных.

Для избежание подобной ошибки, любая переменная изменяется или добавленная после обнаружения целевого значения - должно
быть исключено
                                                 moment of prediction
                                                         |
                                                         V
                                usable                   |           not usable
-------------------------------------------------------------------------------------->
                                                                                  time


Загрязнение Проверки-Обучения
Другой вид утечки возникает когда мы не очень аккуратны в отличении данных для обучения от данных для проверки.

Например, представим что мы запустили подготовку данных (ну например заполнение отсутствующих значений) ДО того как вызвали
train_test_split(). Каков конечный результат? Ваша модель может быть неплохо оценена на проверке, даст вам уверенность
в том что она хороша, но по факту плохо себя покажет в реальных условиях.

Далее, вы включаете данные из проверочных или тестовых данных в то как вы делаете предсказания, так что они могут неплохо
справляться на конкретно этих данных даже если они не смогут обобщить их с новыми данными. Эта проблема станет более незримой
и даже более опасной когда вы будете осуществлять более комплексное конструирование признаков.

Если ваша проверка основана на просто разделении Обучения-Проверки, исключите проверочные данные из любого варианта подгонки
модели, включая подгонку при подготавительных шагах. Все это становится проще если использовать пайплайны из библиотеки sklearn.
Когда мы используем перекрестную проверку, это даже более критично чтобы мы осуществляли подготовку внутри пайплайна.


