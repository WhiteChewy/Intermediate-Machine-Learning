Дискретные переменные

Что это такое?
Дискретные переменные могут принимать ограниченное количество значений.
- Например, представте опрос где вас спрашивают "Как часто вы едите завтрак?" и  предоставляют вам только 4 варианта
ответа: Никогда, Редко, Почти всегда, Каждый день.
- Или если людей спросят какую марку автомобилей они водят, ответы обычно будут ограничены чем то вроде "Хонда", "Тойота",
"Форд" и т.п. В данном случае данные тоже дискретны.

Мы получим ошибку если поробуем "запихнуть" эти переменные в большинство ML-моделей в Питоне без предварительной обработки.
И так сравним три способа предварительной обработки таких данных.

I. Выкинуть дискретные переменные
Самый легкий подход к тому как обрабатывать дискретные переменные - это просто выкинуть их из дата сета. Как и с не нулевыми данными
этот подход будет работать только если в этих столбцах нет полезной информации.

II. Порядковая кодировка.
Грубо говоря это замена вариантов ответов на цифры. Например в случае с опросом про завтрак ответы 
Никогда, Редко, Почти всегда, Каждый день  -- можно заменить на 0 1 2 3 соответственно и работать с ними.
г----------------+                     г----------------+
|    Breakfast   |                     |    Breakfast   |
+----------------+               |\    +----------------+
|   Каждый день  |  +------------+ \   |        3       |
+----------------+  |               \  +----------------+
|     Никогда    |  |                \ |        0       |
+----------------+  |                / +----------------+
|      Редко     |  |               /  |        1       |
+----------------+  +------------+ /   +----------------+
|     Никогда    |               |/    |        0       |
+----------------+                     +----------------+

Этот медод имеет смысл в этом примере, потому что существует неоспоримая градация категорий. Но не все дискретные данные 
имеют понятный порядок в их значениях, но мы относим данные которые имеют такое свойство к "порядковым переменным". Для 
моделей основанных на деревьях (как например древо выбора или случайный лес) мы можем предположить что порядковая кодировка
будет неплохо работать с порядковыми переменными.

III. Быстрое кодирование.

Метод Быстрое кодирование создает новые столбцы которые показывают присутствие или отсутствие каждого возможного значения
в исходных данных. Например:

г----------------+                     г----------------+----------------+----------------+
|      Color     |                     |       Red      |      Yellow    |      Green     |
+----------------+               |\    +----------------+----------------+----------------+
|       Red      |  +------------+ \   |        1       |        0       |        0       |
+----------------+  |               \  +----------------+----------------+----------------+
|       Red      |  |                \ |        1       |        0       |        0       |
+----------------+  |                / +----------------+----------------+----------------+
|     Yellow     |  |               /  |        0       |        1       |        0       |
+----------------+  +------------+ /   +----------------+----------------+----------------+
|      Green     |               |/    |        0       |        0       |        1       |
+----------------+                     +----------------+----------------+----------------+

В исходном датасете, "Color" дискретная переменная с тремя категориями: 'Red', 'Yellow', 'Green'.  Соответствующее быстрое
еодирование содержит один столбец для каждого возможного значения и одну строку для каждой строки в исходном датасете.
Где бы оригинальное значение не было 'Red', мы указываем 1 в столбце 'Red', там где значение было 'Yellow' мы указываем 1
в столбце Yellow и так далее.

В отличие от "порядковой кодировки", "быстрое кодирование" не требует того чтобы категории зависили друг от друга по порядку.
Таким образом можно ожидать  что этот метод будеть работать хорошо почти всегда, если отсутствует порядковая взаимосявзь.
Т.е. в текущем примере нельзя точно сказать Красный больше или меньше чем Желтый.  Такие дискретные переменные зовутся
"качественными переменными".

"Быстрая кодировка" обычно плохо срабатывает если дискретные переменные имеют широкий спектр вариантов. (т.е. лучше не использовать
Быструю Кодировку если переменная принимает более 15 разных значений).

Так какой же вариант лучший?
В нашем случае, удаление дискретных столбцов показало себя хуже всего, так как значение САО больше всего. Для двух других случаев
САО были очень близки друг к другу, так что не имеет особого смысла говорить что второй лучше чем первый или наоборот.

В общем случае, быстрая кодировка будет в большинстве случаев показывать себя лучше всего, а удаление дискретных столбцов - хуже.
НО все зависит от конкретного случая.
